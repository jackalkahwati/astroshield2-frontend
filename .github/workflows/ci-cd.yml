name: AstroShield CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Run tests for backend and frontend
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - uses: actions/checkout@v3

      # Set up Python for backend
      - name: Set up Python
        if: matrix.service == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      # Set up Node.js for frontend
      - name: Set up Node.js
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      # Backend test steps
      - name: Install backend dependencies
        if: matrix.service == 'backend'
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests
        if: matrix.service == 'backend'
        run: |
          cd backend
          python -m pytest --cov=app

      # Frontend test steps
      - name: Install frontend dependencies
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm test -- --watchAll=false

  # Build Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:latest
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging environment
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Copy docker-compose.yml to staging server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          source: "docker-compose.yml,.env.production"
          target: "~/asttroshield"
          
      - name: Deploy to staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd ~/asttroshield
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker-compose pull
            docker-compose up -d
            
  # Deploy to production (manual approval required)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://asttroshield.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Copy docker-compose.yml to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          source: "docker-compose.yml,.env.production"
          target: "~/asttroshield"
          
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd ~/asttroshield
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker-compose pull
            docker-compose up -d 